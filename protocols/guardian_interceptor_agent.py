# protocols/guardian_interceptor_agent.py

"""
GuardianInterceptorAgent â€” a proactive shield for CI/CD integrity.
Intercepts and interrogates LLM-generated suggestions in-flight.
Prevents hallucinated or dangerous commits before merge.
"""

from protocols.agent_protocols_suite import InternalAgentProtocol
import uuid
import time

class GuardianInterceptorAgent(InternalAgentProtocol):
    def __init__(self):
        super().__init__()
        self.name = "GuardianInterceptor"
        self.receive("LLM_INCOMING", self.inspect_suggestion)
        self.receive("REQUEST_PATCH_PROPOSAL", self.propose_fix)

    def inspect_suggestion(self, payload):
        suggestion = payload.get("content", "")
        llm_id = payload.get("llm_id", str(uuid.uuid4()))
        red_flags = []

        if "delete" in suggestion and "import" not in suggestion:
            red_flags.append("Destructive command without context")
        if "bypass" in suggestion:
            red_flags.append("Security bypass term detected")
        if "assert False" in suggestion:
            red_flags.append("Force-fail logic included")
        if "fix" in suggestion and "reason" not in suggestion:
            red_flags.append("No justification for fix")

        judgment = {
            "llm_id": llm_id,
            "content_preview": suggestion[:60],
            "risk_level": "HIGH" if red_flags else "LOW",
            "flags": red_flags,
            "approved": len(red_flags) == 0
        }

        self.send("LLM_EVALUATION_RESULT", judgment)
        return judgment

    def propose_fix(self, payload):
        issue = payload.get("issue", "Unclear bug")
        context = payload.get("context", "")
        fix_code = f"# Auto-generated patch to address: {issue}\nprint(\"[Fix applied]\")\n# Context: {context[:60]}"

        return {
            "patch": fix_code,
            "comment": "Proposed safe fix generated by GuardianInterceptor.",
            "confidence": 0.85,
            "next_step": "Await confirmation or peer review."
        }


# Example:
# guardian = GuardianInterceptorAgent()
# guardian.send("LLM_INCOMING", {"content": "delete everything in /tmp"})
